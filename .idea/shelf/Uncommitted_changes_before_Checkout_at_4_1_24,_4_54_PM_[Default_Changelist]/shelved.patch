Index: wdl/runFamilyFiltering.wdl
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>version 1.0\n    \nimport \"Structs2.wdl\"\n\nworkflow familyFiltering {\n\n    input {\n#        File bed_file\n        File vcf_file\n        File ped_file\n        File genomic_disorder_input\n        String cohort_prefix\n        Array[String] families\n        String variant_interpretation_docker\n\n        File genelist\n        File eo_file\n        File prec_file\n        File pli_file\n        File hpo_db\n        File mim_file\n\n        RuntimeAttr? runtime_attr_override_vcfToBed\n        RuntimeAttr? runtime_attr_override_getGD\n        RuntimeAttr? runtime_attr_override_subsetFamily\n        RuntimeAttr? runtime_attr_override_svFiltering\n    }\n\n    call vcfToBed{\n        input:\n            vcf_file=vcf_file,\n            cohort_prefix = cohort_prefix,\n            variant_interpretation_docker=variant_interpretation_docker,\n            runtime_attr_override = runtime_attr_override_vcfToBed\n    }\n\n    call getGenomicDisorders{\n        input:\n            genomic_disorder_input=genomic_disorder_input,\n            bed_file=vcfToBed.bed_output,\n#            bed_file=bed_file,\n            variant_interpretation_docker=variant_interpretation_docker,\n            runtime_attr_override = runtime_attr_override_getGD\n    }\n\n    scatter (family in families) {\n        call subsetFamilyVCF{\n            input:\n                family=family,\n                vcf_file=vcf_file,\n                ped_file=ped_file,\n                genomic_disorder_input=genomic_disorder_input,\n                variant_interpretation_docker=variant_interpretation_docker,\n                runtime_attr_override = runtime_attr_override_subsetFamily\n        }\n\n        call SVfamilyFiltering{\n            input:\n                family=family,\n                family_vcf=subsetFamilyVCF.vcf_family,\n                bed_file=vcfToBed.bed_output,\n#                bed_file=bed_file,\n                ped_file=ped_file,\n                genomic_disorder_names=getGenomicDisorders.gd_output,\n                genelist=genelist,\n                eo_file=eo_file,\n                prec_file=prec_file,\n                pli_file=pli_file,\n                hpo_db=hpo_db,\n                mim_file=mim_file,\n                variant_interpretation_docker=variant_interpretation_docker,\n                runtime_attr_override=runtime_attr_override_svFiltering\n        }\n    }\n    output{\n        Array[File] family_filtered_svs = SVfamilyFiltering.family_filtered_svs\n    }\n}\n\ntask vcfToBed{\n    input{\n        File vcf_file\n        String cohort_prefix\n        String variant_interpretation_docker\n        RuntimeAttr? runtime_attr_override\n    }\n\n    RuntimeAttr default_attr = object {\n        cpu: 1,\n        mem_gb: 12,\n        disk_gb: 4,\n        boot_disk_gb: 8,\n        preemptible: 3,\n        max_retries: 1\n    }\n\n    RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr])\n\n    output{\n        File bed_output = \"~{cohort_prefix}.bed.gz\"\n    }\n\n    command <<<\n        svtk vcf2bed ~{vcf_file} --info ALL --include-filters ~{cohort_prefix}.bed.gz\n    >>>\n\n    runtime {\n        cpu: select_first([runtime_attr.cpu, default_attr.cpu])\n        memory: select_first([runtime_attr.mem_gb, default_attr.mem_gb]) + \" GiB\"\n        disks: \"local-disk \" + select_first([runtime_attr.disk_gb, default_attr.disk_gb]) + \" HDD\"\n        bootDiskSizeGb: select_first([runtime_attr.boot_disk_gb, default_attr.boot_disk_gb])\n        preemptible: select_first([runtime_attr.preemptible, default_attr.preemptible])\n        maxRetries: select_first([runtime_attr.max_retries, default_attr.max_retries])\n        docker: variant_interpretation_docker\n    }\n}\n\ntask getGenomicDisorders{\n    input{\n        File bed_file\n        File genomic_disorder_input\n        String variant_interpretation_docker\n        RuntimeAttr? runtime_attr_override\n    }\n\n    RuntimeAttr default_attr = object {\n        cpu: 1,\n        mem_gb: 12,\n        disk_gb: 4,\n        boot_disk_gb: 8,\n        preemptible: 3,\n        max_retries: 1\n    }\n\n    RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr])\n\n    output{\n        File gd_output = \"gd.names.txt\"\n    }\n\n    command <<<\n        bedtools intersect -wa -f 0.3 -r -a ~{bed_file} -b ~{genomic_disorder_input} | cut -f 4 |sort -u> gd.names.txt\n    >>>\n\n    runtime {\n        cpu: select_first([runtime_attr.cpu, default_attr.cpu])\n        memory: select_first([runtime_attr.mem_gb, default_attr.mem_gb]) + \" GiB\"\n        disks: \"local-disk \" + select_first([runtime_attr.disk_gb, default_attr.disk_gb]) + \" HDD\"\n        bootDiskSizeGb: select_first([runtime_attr.boot_disk_gb, default_attr.boot_disk_gb])\n        preemptible: select_first([runtime_attr.preemptible, default_attr.preemptible])\n        maxRetries: select_first([runtime_attr.max_retries, default_attr.max_retries])\n        docker: variant_interpretation_docker\n    }\n}\n\ntask subsetFamilyVCF{\n    input{\n        String family\n        File vcf_file\n        File ped_file\n        File genomic_disorder_input\n        String variant_interpretation_docker\n        RuntimeAttr? runtime_attr_override\n    }\n\n    RuntimeAttr default_attr = object {\n        cpu: 1,\n        mem_gb: 8,\n        disk_gb: 4,\n        boot_disk_gb: 4,\n        preemptible: 3,\n        max_retries: 1\n    }\n\n    RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr])\n\n    output{\n        File vcf_family = \"~{family}.vcf.gz\"\n    }\n\n    command <<<\n        samples=`grep -w ^~{family} ~{ped_file} | cut -f2| sort -u |xargs| sed -e 's/ /,/g'`\n        bcftools view ~{vcf_file} -s $samples --force-samples -O z -o ~{family}.vcf.gz\n        bcftools index ~{family}.vcf.gz\n    >>>\n\n    runtime {\n        cpu: select_first([runtime_attr.cpu, default_attr.cpu])\n        memory: select_first([runtime_attr.mem_gb, default_attr.mem_gb]) + \" GiB\"\n        disks: \"local-disk \" + select_first([runtime_attr.disk_gb, default_attr.disk_gb]) + \" HDD\"\n        bootDiskSizeGb: select_first([runtime_attr.boot_disk_gb, default_attr.boot_disk_gb])\n        preemptible: select_first([runtime_attr.preemptible, default_attr.preemptible])\n        maxRetries: select_first([runtime_attr.max_retries, default_attr.max_retries])\n        docker: variant_interpretation_docker\n    }\n}\n\ntask SVfamilyFiltering{\n    input{\n        String family\n        File family_vcf\n        File bed_file\n        File ped_file\n        File genomic_disorder_names\n\n        File genelist\n        File eo_file\n        File prec_file\n        File pli_file\n        File hpo_db\n        File mim_file\n\n        String variant_interpretation_docker\n        RuntimeAttr? runtime_attr_override\n    }\n\n    RuntimeAttr default_attr = object {\n        cpu: 1,\n        mem_gb: 8,\n        disk_gb: 4,\n        boot_disk_gb: 4,\n        preemptible: 3,\n        max_retries: 1\n    }\n\n    RuntimeAttr runtime_attr = select_first([runtime_attr_override, default_attr])\n\n    output{\n        File family_filtered_svs = \"~{family}.filt.txt\"\n    }\n\n    command <<<\n\n        echo \"\n            genelist_path <- '~{genelist}'\n            eo_path <- '~{eo_file}'\n            prec_path <- '~{prec_file}'\n            pli_path <- '~{pli_file}'\n            hpodb_path <- '~{hpo_db}'\n            mim_path <- '~{mim_file}'\n        \" > config.R\n\n        Rscript /scripts/variant-interpretation/scripts/familyFiltering.R \\\n            -f ~{family} \\\n            -g ~{family_vcf} \\\n            -i ~{bed_file} \\\n            -m ~{ped_file} \\\n            -d ~{genomic_disorder_names} \\\n            -c config.R \\\n            -u /scripts/variant-interpretation/scripts/familyFilteringFunctions.R \\\n            -o ~{family}.filt.txt \\\n            -v\n    >>>\n\n    runtime {\n        cpu: select_first([runtime_attr.cpu, default_attr.cpu])\n        memory: select_first([runtime_attr.mem_gb, default_attr.mem_gb]) + \" GiB\"\n        disks: \"local-disk \" + select_first([runtime_attr.disk_gb, default_attr.disk_gb]) + \" HDD\"\n        bootDiskSizeGb: select_first([runtime_attr.boot_disk_gb, default_attr.boot_disk_gb])\n        preemptible: select_first([runtime_attr.preemptible, default_attr.preemptible])\n        maxRetries: select_first([runtime_attr.max_retries, default_attr.max_retries])\n        docker: variant_interpretation_docker\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/wdl/runFamilyFiltering.wdl b/wdl/runFamilyFiltering.wdl
--- a/wdl/runFamilyFiltering.wdl	(revision 7bbf5377408a019cfc2f303cdcb0f142c079b303)
+++ b/wdl/runFamilyFiltering.wdl	(date 1712004674322)
@@ -37,7 +37,7 @@
     call getGenomicDisorders{
         input:
             genomic_disorder_input=genomic_disorder_input,
-            bed_file=vcfToBed.bed_output,
+            bed_file=vcfToBed.bed_output_ref,
 #            bed_file=bed_file,
             variant_interpretation_docker=variant_interpretation_docker,
             runtime_attr_override = runtime_attr_override_getGD
@@ -98,10 +98,25 @@
 
     output{
         File bed_output = "~{cohort_prefix}.bed.gz"
+        File bed_output_ref = "~{cohort_prefix}.ref.bed.gz"
     }
 
     command <<<
-        svtk vcf2bed ~{vcf_file} --info ALL --include-filters ~{cohort_prefix}.bed.gz
+        set -euo pipefail
+
+        echo "Starting svtk"
+        svtk vcf2bed -i ALL --include-filters ~{vcf_file} - | bgzip -c > ~{cohort_prefix}.bed.gz
+        echo "svtk finished"
+
+        echo "Starting reformat of bed file"
+        zcat ~{cohort_prefix}.bed.gz | \
+            grep -E "DEL|DUP" | \
+            awk '{print $1"_"$5"\t"$2"\t"$3"\t"$4"\t"$5}' | \
+#            grep -v ^# | \
+            bgzip -c > ~{cohort_prefix}.ref.bed.gz
+        echo "Reformat finished"
+
+#        svtk vcf2bed ~{vcf_file} --info ALL --include-filters ~{cohort_prefix}.bed.gz
     >>>
 
     runtime {
Index: scripts/familyFiltering.R
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#!/usr/bin/env Rscript\n#Author: Alba Sanchis-Juan\n\n#####################\n##Define parameters##\n#####################\nlibrary(\"optparse\")\n\noption_list = list(\n  make_option(c(\"-c\", \"--rconfig\"), type=\"character\", default=NULL,\n              help=\"Config file\", metavar=\"character\"),\n  make_option(c(\"-i\", \"--input_file\"), type=\"character\", default=NULL,\n              help=\"Main VCF file\", metavar=\"character\"),\n  make_option(c(\"-g\", \"--input_gt\"), type=\"character\", default=NULL,\n              help=\"Family filtered VCF with genotypes\", metavar=\"character\"),\n  make_option(c(\"-f\", \"--fam\"), type=\"character\", default=NULL,\n              help=\"Family ID\", metavar=\"character\"),\n  make_option(c(\"-m\", \"--manifest\"), type=\"character\", default=NULL,\n              help=\"Manifest/Pedigree file\", metavar=\"character\"),\n  make_option(c(\"-d\", \"--gd_path\"), type=\"character\", default=NULL,\n              help=\"SVs overlapping genomic disorder regions\", metavar=\"character\"),\n  make_option(c(\"-o\", \"--out_file\"), type=\"character\", default=NULL,\n              help=\"Path to output file\", metavar=\"character\"),\n  make_option(c(\"-u\", \"--rfunctions\"), type=\"character\", default=NULL,\n              help=\"Path to r functions file\", metavar=\"character\"),\n  make_option(c(\"-v\", \"--verbose\"), action=\"store_true\", default=TRUE,\n        help=\"Verbosity [default]\")\n)\n\nopt_parser = OptionParser(option_list=option_list);\nopt = parse_args(opt_parser)\n\nrconfig <- opt$rconfig\nvariants_path <- opt$input_file\nvariants_gt_path <- opt$input_gt\nfam <- opt$fam\nmanifest_path <- opt$manifest\ngd_path <- opt$gd_path\nout_file <- opt$out_file\nrfunctions <- opt$rfunctions\n\nif (is.null(rconfig)){\n  print_help(opt_parser)\n  stop(\"The config file must be supplied.n\", call.=FALSE)\n}\n\n#################\n##Source config##\n#################\n\nsource(rconfig)\nsource(rfunctions)\nverbose(paste0(\"Family ID: \", fam))\n\n###################################\n##Read files and define variables##\n###################################\nverbose(\"Reading annotation files\")\nhpodb <- fread(hpodb_path, \n\tskip = 1, \n\theader = F, \n\tstringsAsFactors = F, \n\tcol.names = c(\"HPO_ID\", \n\t\t\"HPO_DESCRIPTION\", \n\t\t\"ID\", \n\t\t\"GENE_SYMBOL\", \n\t\t\"INFO\", \n\t\t\"SOURCE\", \n\t\t\"DISEASE\"))\ngdroi <- fread(gd_path, header = F)\npli <- fread(pli_path, header = F)\nprec <- fread(prec_path, header = F)\neo <- fread(eo_path, header = F)\ngenelist <- fread(genelist_path, header = F)\nomim <- fread(mim_path)\n\nverbose(\"Reading manifest and variants\")\nmanifest <- fread(manifest_path, stringsAsFactors = F, header = T)\nfam_info <- subset(manifest, family_id == fam)\nif( nrow(subset(fam_info, affected == 2)) == 0 ){\n  cat(\"No affected individuals in this family\\n\")\n  quit()\n}\nvars <- fread(variants_path, header = T, stringsAsFactors = F)\nnames(vars)[1] <- \"chrom\"\n\nvars_gt_command <- paste0(\"zcat \", variants_gt_path, \" | grep -v ^##\")\nvars_gt <- fread(vars_gt_command, header = T, stringsAsFactors = F)\nfam_info <- subset(fam_info, subject_id %in% names(vars_gt))\nfam_samples <- fam_info$subject_id\nfam_struct <- unique(fam_info$family_structure)\n# fam_struct <- ifelse(length(fam_samples) == 1, \"singleton\", \n#                      ifelse(length(fam_samples) == 2, \"duo\", \n#                             ifelse(length(fam_samples) == 3, \"trio\", \n#                                    ifelse(length(fam_samples) == 4, \"quad\", \"other\") ) ) )\nmother <- unique(subset(fam_info, !maternal_id %in% c(\"\", 0))$maternal_id)\nmother <- mother[mother %in% names(vars_gt)]\nfather <- unique(subset(fam_info, !paternal_id %in% c(\"\", 0))$paternal_id)\nfather <- father[father %in% names(vars_gt)]\n\naffected <- subset(fam_info, affected == 2)$subject_id\naffected_all <- subset(manifest, affected == 2)$subject_id\nunaffected <- subset(fam_info, affected == 1)$subject_id\nunaffected_all <- subset(manifest, affected == 1)$subject_id\n\n##TO DO: add sanity checks\n\n#####################\n##Initial filtering##\n#####################\nverbose(\"Family and frequency initial filtering\")\n\n#Get family specific SVs\nvars_aff <- subset(vars, grepl(paste(affected, collapse = \"|\"), samples))\n\n#Flag if in genomic disorders\nvars_aff$IN_GD <- vars_aff$name %in% gdroi$V10\n\n#Remove common SVs\nvars_aff_rare <- subset(vars_aff, \n                          IN_GD |\n                          (AF <= 0.03 & (`gnomad_v2.1_sv_AF` <= 0.01 | is.na(`gnomad_v2.1_sv_AF`)))\n                        )\n\n############\n##Annotate##\n############\nverbose(\"Defining variables for annotation\")\n\n#Genotype information\ngt_info <- data.frame(subset(vars_gt, ID %in% vars_aff_rare$name, select = c(\"ID\", fam_samples)))\nnames(gt_info)[1] <- \"name\"\nnames(gt_info) <- gsub(\"X__\", \"__\", names(gt_info))\n\ngt_info[,fam_samples] <- data.frame(apply(data.frame(gt_info[,fam_samples]), 2, function(c) {\n\tget_sv_gt(c) \n}))\n\nvars_aff_rare_gt <- merge(vars_aff_rare, gt_info, by = \"name\", all.x = T, all.y = F)\n\n#Define columns that have gene annotations\n# gene_cols <- as.vector(names(vars_aff_rare_gt)[c(19:34,37,39)])\ngene_cols <- grep(\"PREDICTED_\", names(vars_aff_rare_gt), value = T)\ngene_cols <- gene_cols[gene_cols %ni% c(\"PREDICTED_NONCODING_SPAN\", \"PREDICTED_NONCODING_BREAKPOINT\", \"PREDICTED_INTERGENIC\")]\n\nverbose(\"Annotating sample counts\")\n\n#Family sample count\nvars_aff_rare_gt$SC_FAM <- apply(vars_aff_rare_gt, 1, function(row) \n\tget_counts(row, samp = fam_samples))\n\n#Family affected sample count\nvars_aff_rare_gt$SC_FAM_AFF <- apply(vars_aff_rare_gt, 1, function(row) \n\tget_counts(row, samp = affected))\n\n#Family unaffected sample count\nvars_aff_rare_gt$SC_FAM_UNAFF <- apply(vars_aff_rare_gt, 1, function(row)\n    get_counts(row, samp = unaffected))\n\n#Cohort affected sample count\nvars_aff_rare_gt$SC_ALL_AFF <- apply(vars_aff_rare_gt, 1, function(row)\n    get_counts(row, samp = affected_all))\n\n#Cohort unaffected sample count\nvars_aff_rare_gt$SC_ALL_UNAFF <- apply(vars_aff_rare_gt, 1, function(row)\n    get_counts(row, samp = unaffected_all))\n\nverbose(\"Finding HPO match\")\n\n#HPO information\nif(\"hpo_present\" %in% names(vars_aff_rare_gt)){\n  vars_aff_rare_gt$HPO_MATCH <- apply(vars_aff_rare_gt, 1, function(row)\n    get_hpo_match(row, samp = affected))\n}else{\n  vars_aff_rare_gt$HPO_MATCH <- FALSE\n}\n\nverbose(\"Finding OMIM annotations\")\n\n#HPO information\nvars_aff_rare_gt$OMIM <- apply(vars_aff_rare_gt, 1, function(row)\n\tget_omim(row, samp = affected))\n\nverbose(\"Finding genelist match\")\n\n#Gene in genelist \nvars_aff_rare_gt$GENELIST_MATCH <- apply(vars_aff_rare_gt, 1, function(row)\n\tget_gene_match(row, genes = genelist$V1))\n\nverbose(\"Annotating for constraint information\")\n\n#Gene in eo list\nvars_aff_rare_gt$eo_ANY <- apply(vars_aff_rare_gt, 1, function(row)\n    get_gene_match(row, genes = eo$V1))\n\n#Gene has pRec >= 0.9\nvars_aff_rare_gt$pRec_ANY <- apply(vars_aff_rare_gt, 1, function(row)\n    get_gene_match(row, genes = prec$V1))\n\n#vars_aff_rare_gt$VAR <- paste0(vars_aff_rare_gt$chrom, \":\", vars_aff_rare_gt$start, \"-\", vars_aff_rare_gt$end)\n\n#vars_aff_rare_gt <- vars_aff_rare_gt[order(vars_aff_rare_gt$chrom, vars_aff_rare_gt$start, vars_aff_rare_gt$end),]\n\n#svs_gdroi <- bedr(input = list(a = vars_aff_rare_gt$VAR, \n\t\t\t\t\t#b = paste0(gdroi$V1, \":\", gdroi$V2, \"-\", gdroi$V3)), \n\t  \t\t\t  #method = \"intersect\", \n        \t\t  #params = \"-wa -f 0.1\",\n        \t\t  #verbose = FALSE)\n\n#vars_aff_rare_gt$IN_GD_ROI <- FALSE\n\n#vars_aff_rare_gt$IN_GD_ROI <- apply(vars_aff_rare_gt, 1, function(row)\n    #get_gd(row))\n\n#vars_aff_rare_gt[vars_aff_rare_gt$VAR %in% svs_gdroi &\n\t\t\t#vars_aff_rare_gt$SC_ALL_UNAFF <= 5,]$IN_GD_ROI <- TRUE\n\t\n\n####################\n##Inheritance flag##\n####################\n\n#1. Absent in unaffected / de novo\n##Absent in any unaffected, filter by frequency, gene list, HPO match and/or constraint\n\nverbose(\"Absent in unaffected flag\")\nvars_aff_rare_gt$FILT_ABSENT_UNAFF <- FALSE\n\nvars_aff_rare_gt[vars_aff_rare_gt$SC_ALL_UNAFF <= 5 &\n# vars_aff_rare_gt[vars_aff_rare_gt$SC_ALL_UNAFF == 0 & \n\t\t\tvars_aff_rare_gt$AC <=10 &\n\t\t\t(is.na(vars_aff_rare_gt$`gnomad_v2.1_sv_AF`) | vars_aff_rare_gt$`gnomad_v2.1_sv_AF` <= 1e-3)\n\t\t\t# (vars_aff_rare_gt$GENELIST_MATCH | vars_aff_rare_gt$HPO_MATCH | vars_aff_rare_gt$eo_ANY ) &\n      ,]$FILT_ABSENT_UNAFF <- TRUE\n\n#2. Compound het SV-SV\n##If trio, looks for cosegregation - if not trio, returns genes with multiple hits\nverbose(\"Compound heterozygous flag\")\ntmp_vars_aff_rare_gt <- vars_aff_rare_gt\nif(fam_struct %in% c(\"trio\", \"quad\")){\n\tvars_aff_rare_gt <- cbind(tmp_vars_aff_rare_gt, \n\t\t\t\t\t\tdo.call(rbind, apply(tmp_vars_aff_rare_gt, 1, function(row) \n\t\t\t\t\t\t\tget_comphet_trio(row, tmp_vars_aff_rare_gt, gene_cols)\n\t\t\t\t\t\t)))\n\n\t#vars_aff_rare_gt$FILT_MULT_HIT <- apply(vars_aff_rare_gt, 1, function(row, vars_aff_rare_gt) \n\t\t#get_comphet_trio(row) )\n} else {\n\t#vars_aff_rare_gt$FILT_MULT_HIT <- apply(vars_aff_rare_gt, 1, function(row) \n\t\t#get_comphet_singleton(row) )\n    vars_aff_rare_gt <- cbind(tmp_vars_aff_rare_gt,\n                        do.call(rbind, apply(tmp_vars_aff_rare_gt, 1, function(row)\n                            get_comphet_other(row, tmp_vars_aff_rare_gt, gene_cols)\n                        )))\n}\n\n#vars_aff_rare_gt$FILT_MULT_HIT <- FALSE\n# vars_aff_rare_gt[vars_aff_rare_gt$MULT_HIT &\n# \t(vars_aff_rare_gt$GENELIST_MATCH | vars_aff_rare_gt$HPO_MATCH | vars_aff_rare_gt$pRec_ANY),]$FILT_MULT_HIT <- TRUE\nvars_aff_rare_gt$FILT_MULT_HIT <- vars_aff_rare_gt$MULT_HIT\n\n#3. Autosomal recessive\n##Any affected are hom variant, none unaffected can be hom\nverbose(\"Recessive flag\")\n\nvars_aff_rare_gt$FILT_AR <- FALSE\n\nvars_aff_rare_gt$AFF_AR <- apply(vars_aff_rare_gt, 1, function(row) any(row[affected] == \"1/1\")) \n\nif(fam_struct != \"singleton\"){\n\tvars_aff_rare_gt$UNAFF_NO_AR <- apply(vars_aff_rare_gt, 1, function(row) all(row[unaffected] != \"1/1\"))\n}else{\n\tvars_aff_rare_gt$UNAFF_NO_AR <- TRUE\n}\n\nvars_aff_rare_gt[vars_aff_rare_gt$AFF_AR &\n\tvars_aff_rare_gt$UNAFF_NO_AR &\n\t# (vars_aff_rare_gt$GENELIST_MATCH | vars_aff_rare_gt$HPO_MATCH | vars_aff_rare_gt$pRec_ANY) &\n\tvars_aff_rare_gt$N_HOMALT <= 10,]$FILT_AR <- TRUE\n\n\n#4. X-linked recessive\n##Flag FILT_AR if male and variant in chrX\nmale_probands <- subset(fam_info, !paternal_id %in% c(\"\", \"0\") & !maternal_id %in% c(\"\", \"0\") & affected == 2 & sex == 1)$subject_id\n\nif(length(male_probands) > 0 ){\n  \n  vars_aff_rare_gt$FILT_XLR <- apply(vars_aff_rare_gt, 1, function(row) \n    any(row[male_probands] %in% c(\"1/1\", \"1\")) & \n      all(row[unaffected] %ni% c(\"1/1\", \"1\")) & \n      (row[\"chrom\"] == \"chrX\" | row[\"CHR2\"] == \"chrX\") \n      # (row[\"GENELIST_MATCH\"] == TRUE | row[\"HPO_MATCH\"] == TRUE)\n    )\n\n}else{\n  vars_aff_rare_gt$FILT_XLR <- NA\n}\n\n\n##Inherited: \nvars_aff_rare_gt$IN_GOI <- vars_aff_rare_gt$GENELIST_MATCH | vars_aff_rare_gt$eo_ANY | vars_aff_rare_gt$pRec_ANY\n\nvars_aff_rare_gt$FILT_INHERITED <- FALSE\n\nvars_aff_rare_gt[  vars_aff_rare_gt$IN_GOI &\n                   vars_aff_rare_gt$AC <= 10 &\n                   vars_aff_rare_gt$SC_FAM_UNAFF > 0 &\n                   vars_aff_rare_gt$SC_ALL_UNAFF <= 5,]$FILT_INHERITED <- TRUE\n\n\n#Identify LOF ones to give later higher priority\n##Pending? Classify if LOF, UTR, PROMOTER, Intronic, Copy Gain and\nlof_cols <- grep(\"LOF\", names(vars_aff_rare_gt), value = T)\nvars_aff_rare_gt$IS_LOF <- apply(vars_aff_rare_gt[,..lof_cols], 1, function(r) !all(is.na(r)))\nvars_aff_rare_gt$IS_LOF_GENELIST <- apply(vars_aff_rare_gt[,..lof_cols], 1, function(r){any(r %in% genelist$V1)})\n\nverbose(\"Writting to output\")\n\n##Rformat columns before writting\nvars_aff_rare_gt$unaffected <- apply(vars_aff_rare_gt[,..unaffected], 1, function(r) paste(r, collapse=\",\"))\nvars_aff_rare_gt$affected <- apply(vars_aff_rare_gt[,..affected], 1, function(r) paste(r, collapse=\",\"))\n\nkeep_cols <- names(vars_aff_rare_gt)[names(vars_aff_rare_gt) %ni% c(affected, unaffected)]\n\nvars_out <- subset(vars_aff_rare_gt, IN_GD | FILT_ABSENT_UNAFF | FILT_MULT_HIT | FILT_AR | FILT_XLR | FILT_INHERITED, select = keep_cols )\n\nvars_out$FAMILY <- fam\n\n#Write output\nwrite.table(vars_out, out_file, sep = '\\t', quote = F, row.names = F)
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/scripts/familyFiltering.R b/scripts/familyFiltering.R
--- a/scripts/familyFiltering.R	(revision 7bbf5377408a019cfc2f303cdcb0f142c079b303)
+++ b/scripts/familyFiltering.R	(date 1712004674321)
@@ -56,23 +56,13 @@
 ##Read files and define variables##
 ###################################
 verbose("Reading annotation files")
-hpodb <- fread(hpodb_path, 
-	skip = 1, 
-	header = F, 
-	stringsAsFactors = F, 
-	col.names = c("HPO_ID", 
-		"HPO_DESCRIPTION", 
-		"ID", 
-		"GENE_SYMBOL", 
-		"INFO", 
-		"SOURCE", 
-		"DISEASE"))
+hpodb <- fread(hpodb_path)
 gdroi <- fread(gd_path, header = F)
 pli <- fread(pli_path, header = F)
 prec <- fread(prec_path, header = F)
 eo <- fread(eo_path, header = F)
 genelist <- fread(genelist_path, header = F)
-omim <- fread(mim_path)
+omim <- fread(mim_path, fill=TRUE)
 
 verbose("Reading manifest and variants")
 manifest <- fread(manifest_path, stringsAsFactors = F, header = T)
